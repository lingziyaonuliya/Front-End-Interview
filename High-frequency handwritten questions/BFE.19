[`this`]:(https://bigfrontend.dev/quiz/this)

1.If the new keyword is used when calling the function, this inside the function is a brand new object.
2.If apply, call, or bind are used to call/create a function, this inside the function is the object that is passed in as the argument.
3.If a function is called as a method, such as obj.method() — this is the object that the function is a property of.
4.If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, this is 
  the global object. In a browser, it is the window object. If in strict mode ('use strict'), this will be undefined instead of the global object.
5.If multiple of the above rules apply, the rule that is higher wins and will set the this value.
6.If the function is an ES2015 arrow function, it ignores all the rules above and receives the this value of its surrounding scope at 
  the time it is created.

```javascript
// This is a JavaScript Quiz from BFE.dev


const obj = {
  a: 1,
  b: function() {
    console.log(this.a)
  },
  c() {
    console.log(this.a)
  },
  d: () => {
    console.log(this.a)
  },
  e: (function() {
    return () => {
      console.log(this.a);
    }
  })(),
  f: function() {
    return () => {
      console.log(this.a);
    }
  }
}

console.log(obj.a)  // 1，`obj.a` directly accessing the property `a` of the object.
obj.b()             // 1，invoke b() method, `this` points to obj 
;(obj.b)()          // 1，`obj.b()` `(obj.b)()` same as above 	
const b = obj.b     // When the method b of obj is assigned to the variable b, it loses its association with obj.	
b()                 // Consequently, when b is invoked as a standalone function, this inside b refers to the global.
obj.b.apply({a: 2}) // 2，use apply to change the reference of `this`, it points to {a: 2}
obj.c()             // 1，call c()，`this` refers to obj
obj.d()             // undefined，here is a arrow function，and it inherts `this` from it's outer 															                      
                    //	scope which is the global object,and there is no `a` in the global object
;(obj.d)()          // undefined，is equivalent to /ɪˈkwɪv.əl.ənt/ `obj.d()`
obj.d.apply({a:2})  // undefined，the `this` value of an arrow function cannot be changed
obj.e()             // undefined
// e is assigned the value of an arrow function returned by an Immediately Invoked Function Expression (IIFE).
// The this value of the arrow function is bound to the context in which it was defined, which is the global object.
;(obj.e)()          // undefined，Identical to `obj.e()`
obj.e.call({a:2})   // undefined，the call() couldn't change the reference of arrow function
obj.f()()           // 1，Calling the f method returns an arrow function whose this is bound to the this of f, which points to obj.
;(obj.f())()        // 1，Same as above
obj.f().call({a:2}) // 1，the `this` value of an arrow function cannot be changed

 
